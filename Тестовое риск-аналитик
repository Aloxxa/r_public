{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "1LnEE9fSAF07"
      ],
      "authorship_tag": "ABX9TyMfc67yfnRfOZR/CJwDsBv/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aloxxa/r_public/blob/main/%D0%AD%D1%82%D0%B0%D0%BF_2_%D0%A0%D0%B8%D1%81%D0%BA_%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA_%D0%94%D0%97_%D0%A7%D1%83%D0%BA%D0%B0%D0%B2%D0%B8%D0%BD.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "-n6PRe_d-zeu",
        "outputId": "03678e54-cfd8-4a1f-9daa-88da278a7b11"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gdown/__main__.py:132: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1SxiCKNZsXFQqS6r0R0hR0s58Bzyr79AZ\n",
            "To: /content/домашнее задание 2 - портфель.xlsx\n",
            "100% 5.42k/5.42k [00:00<00:00, 12.9MB/s]\n"
          ]
        }
      ],
      "source": [
        "!gdown --id 1SxiCKNZsXFQqS6r0R0hR0s58Bzyr79AZ"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "#plt.style.use('dark_background')\n",
        "pd.set_option('display.max_columns', None)\n",
        "import sqlite3\n",
        "con = sqlite3.connect('db')\n",
        "def select(sql):\n",
        "  return pd.read_sql(sql,con)"
      ],
      "metadata": {
        "id": "FSXoNvoDAUNf"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2"
      ],
      "metadata": {
        "id": "oRoohH0XAENC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 2: Основная метрика ожидаемых убытков в финансовой отчетности МСФО -- резервы.\n",
        "\n",
        "Резервы могут быть рассчитаны разными способами, но упрощенно классическую формулу можно представить так: Резерв=Баланс*PD*LGD,\n",
        "где\n",
        "Баланс -- задолженность на дату расчета,\n",
        "PD - вероятность выхода сделки в дефолт,\n",
        "LGD - доля потерь после дефолта.\n",
        "Таким образом, резерв -- это сумма, которая является математическим ожиданием финальных потерь долга.\n",
        "\n",
        "В таблице дан срез портфеля и значения риск. параметров сделок (PD и LGD) за две даты.\n",
        "Оцените эффект, за счет каких факторов произошли изменения в резервах от марта к апрелю? Что можно сказать про динамику риск. параметров?\n"
      ],
      "metadata": {
        "id": "pfcDBpCuAQJS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_excel('/content/домашнее задание 2 - портфель.xlsx')\n",
        "df = data.copy()"
      ],
      "metadata": {
        "id": "P3s_vJ3Y_GvW"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "wn5YZPX4AtRG",
        "outputId": "695f7df5-c22f-4494-d8c5-2e52c23ab37c"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20 entries, 0 to 19\n",
            "Data columns (total 6 columns):\n",
            " #   Column  Non-Null Count  Dtype         \n",
            "---  ------  --------------  -----         \n",
            " 0   Дата    20 non-null     datetime64[ns]\n",
            " 1   Сделка  20 non-null     int64         \n",
            " 2   Баланс  20 non-null     int64         \n",
            " 3   PD      20 non-null     float64       \n",
            " 4   LGD     20 non-null     float64       \n",
            " 5   резерв  0 non-null      float64       \n",
            "dtypes: datetime64[ns](1), float64(3), int64(2)\n",
            "memory usage: 1.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## EDA"
      ],
      "metadata": {
        "id": "DfncKt-HI25f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "collapsed": true,
        "id": "C8u2xUJUHTmL",
        "outputId": "f4bac803-d904-42ac-e180-6b8f66c3159f"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Дата  Сделка   Баланс     PD    LGD  резерв\n",
              "0  2024-03-31       1   550000  0.030  0.855     NaN\n",
              "1  2024-03-31       2   670000  0.028  0.832     NaN\n",
              "2  2024-03-31       3   120100  0.050  0.743     NaN\n",
              "3  2024-03-31       4   142000  0.063  0.734     NaN\n",
              "4  2024-03-31       5    34000  0.057  0.739     NaN\n",
              "5  2024-03-31       6   550000  0.020  0.864     NaN\n",
              "6  2024-03-31       7   329000  0.057  0.744     NaN\n",
              "7  2024-03-31       8    48000  0.083  0.691     NaN\n",
              "8  2024-03-31       9   854000  0.018  0.875     NaN\n",
              "9  2024-03-31      10   139400  0.074  0.740     NaN\n",
              "10 2024-04-30       1   520000  0.034  0.845     NaN\n",
              "11 2024-04-30       3   110000  0.028  0.859     NaN\n",
              "12 2024-04-30       4   115000  0.081  0.721     NaN\n",
              "13 2024-04-30       5    10000  0.043  0.755     NaN\n",
              "14 2024-04-30       6   495000  0.020  0.866     NaN\n",
              "15 2024-04-30       7   294000  0.049  0.714     NaN\n",
              "16 2024-04-30       9   812000  0.021  0.859     NaN\n",
              "17 2024-04-30      10    94400  0.072  0.732     NaN\n",
              "18 2024-04-30      11   350000  0.061  0.749     NaN\n",
              "19 2024-04-30      12  1760000  0.070  0.740     NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-231400bf-dde8-4a4c-8327-67a4889ba241\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Дата</th>\n",
              "      <th>Сделка</th>\n",
              "      <th>Баланс</th>\n",
              "      <th>PD</th>\n",
              "      <th>LGD</th>\n",
              "      <th>резерв</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>1</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.030</td>\n",
              "      <td>0.855</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>2</td>\n",
              "      <td>670000</td>\n",
              "      <td>0.028</td>\n",
              "      <td>0.832</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>3</td>\n",
              "      <td>120100</td>\n",
              "      <td>0.050</td>\n",
              "      <td>0.743</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>4</td>\n",
              "      <td>142000</td>\n",
              "      <td>0.063</td>\n",
              "      <td>0.734</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>5</td>\n",
              "      <td>34000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.739</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>6</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.864</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>7</td>\n",
              "      <td>329000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.744</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>8</td>\n",
              "      <td>48000</td>\n",
              "      <td>0.083</td>\n",
              "      <td>0.691</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>9</td>\n",
              "      <td>854000</td>\n",
              "      <td>0.018</td>\n",
              "      <td>0.875</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>10</td>\n",
              "      <td>139400</td>\n",
              "      <td>0.074</td>\n",
              "      <td>0.740</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>1</td>\n",
              "      <td>520000</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.845</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>3</td>\n",
              "      <td>110000</td>\n",
              "      <td>0.028</td>\n",
              "      <td>0.859</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>4</td>\n",
              "      <td>115000</td>\n",
              "      <td>0.081</td>\n",
              "      <td>0.721</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>5</td>\n",
              "      <td>10000</td>\n",
              "      <td>0.043</td>\n",
              "      <td>0.755</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>6</td>\n",
              "      <td>495000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.866</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>7</td>\n",
              "      <td>294000</td>\n",
              "      <td>0.049</td>\n",
              "      <td>0.714</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>9</td>\n",
              "      <td>812000</td>\n",
              "      <td>0.021</td>\n",
              "      <td>0.859</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>10</td>\n",
              "      <td>94400</td>\n",
              "      <td>0.072</td>\n",
              "      <td>0.732</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>11</td>\n",
              "      <td>350000</td>\n",
              "      <td>0.061</td>\n",
              "      <td>0.749</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>12</td>\n",
              "      <td>1760000</td>\n",
              "      <td>0.070</td>\n",
              "      <td>0.740</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-231400bf-dde8-4a4c-8327-67a4889ba241')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-231400bf-dde8-4a4c-8327-67a4889ba241 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-231400bf-dde8-4a4c-8327-67a4889ba241');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-995737df-2bc8-461c-8749-a23f8123772a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-995737df-2bc8-461c-8749-a23f8123772a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-995737df-2bc8-461c-8749-a23f8123772a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"\\u0414\\u0430\\u0442\\u0430\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-03-31 00:00:00\",\n        \"max\": \"2024-04-30 00:00:00\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2024-04-30 00:00:00\",\n          \"2024-03-31 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0421\\u0434\\u0435\\u043b\\u043a\\u0430\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 414669,\n        \"min\": 10000,\n        \"max\": 1760000,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          550000,\n          329000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.021948444375998858,\n        \"min\": 0.018,\n        \"max\": 0.083,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          0.03,\n          0.028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06393275661522076,\n        \"min\": 0.691,\n        \"max\": 0.875,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.855,\n          0.832\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['резерв'] = df['Баланс'] * df['PD'] * df['LGD']"
      ],
      "metadata": {
        "id": "VsusPIoKFQCi"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def feature_distribution_all(df, hue):\n",
        "        numeric_columns = df.select_dtypes([\"integer\", \"float\"]).columns.tolist()\n",
        "        fig = plt.figure(figsize=(17, 40))\n",
        "        rows, cols = 10, 3\n",
        "        for idx, num in enumerate(numeric_columns[:30]):\n",
        "            ax = fig.add_subplot(rows, cols, idx+1)\n",
        "            ax.grid(alpha=0.7, axis=\"both\")\n",
        "            sns.kdeplot(x=num, fill=True, color=\"#3386FF\", linewidth=0.6, hue=hue, data=df)\n",
        "        fig.tight_layout()\n",
        "        plt.show()\n",
        "feature_distribution_all(df, 'Дата')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 827
        },
        "id": "8Ka_oa5aq9NJ",
        "outputId": "36ca29f5-efce-4009-8c0d-d35432e84e68"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1700x4000 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#df['Дата'] = pd.to_datetime(df['Дата']).dt.date\n",
        "#object"
      ],
      "metadata": {
        "id": "TnANQYL4FGKh"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.pivot_table(index='Сделка', columns='Дата', values=['Баланс','PD', 'LGD', 'резерв'])\n",
        "#не особо удобно"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "Wy9k1YecGrh1",
        "outputId": "7dd3191d-2b13-4156-ea5f-a2d299922236"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              LGD                    PD                Баланс             \\\n",
              "Дата   2024-03-31 2024-04-30 2024-03-31 2024-04-30 2024-03-31 2024-04-30   \n",
              "Сделка                                                                     \n",
              "1           0.855      0.845      0.030      0.034   550000.0   520000.0   \n",
              "2           0.832        NaN      0.028        NaN   670000.0        NaN   \n",
              "3           0.743      0.859      0.050      0.028   120100.0   110000.0   \n",
              "4           0.734      0.721      0.063      0.081   142000.0   115000.0   \n",
              "5           0.739      0.755      0.057      0.043    34000.0    10000.0   \n",
              "6           0.864      0.866      0.020      0.020   550000.0   495000.0   \n",
              "7           0.744      0.714      0.057      0.049   329000.0   294000.0   \n",
              "8           0.691        NaN      0.083        NaN    48000.0        NaN   \n",
              "9           0.875      0.859      0.018      0.021   854000.0   812000.0   \n",
              "10          0.740      0.732      0.074      0.072   139400.0    94400.0   \n",
              "11            NaN      0.749        NaN      0.061        NaN   350000.0   \n",
              "12            NaN      0.740        NaN      0.070        NaN  1760000.0   \n",
              "\n",
              "           резерв              \n",
              "Дата   2024-03-31  2024-04-30  \n",
              "Сделка                         \n",
              "1       14107.500  14939.6000  \n",
              "2       15608.320         NaN  \n",
              "3        4461.715   2645.7200  \n",
              "4        6566.364   6716.1150  \n",
              "5        1432.182    324.6500  \n",
              "6        9504.000   8573.4000  \n",
              "7       13952.232  10285.8840  \n",
              "8        2752.944         NaN  \n",
              "9       13450.500  14647.6680  \n",
              "10       7633.544   4975.2576  \n",
              "11            NaN  15991.1500  \n",
              "12            NaN  91168.0000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-231c7761-80e0-4d39-adda-916224445f2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"2\" halign=\"left\">LGD</th>\n",
              "      <th colspan=\"2\" halign=\"left\">PD</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Баланс</th>\n",
              "      <th colspan=\"2\" halign=\"left\">резерв</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Дата</th>\n",
              "      <th>2024-03-31</th>\n",
              "      <th>2024-04-30</th>\n",
              "      <th>2024-03-31</th>\n",
              "      <th>2024-04-30</th>\n",
              "      <th>2024-03-31</th>\n",
              "      <th>2024-04-30</th>\n",
              "      <th>2024-03-31</th>\n",
              "      <th>2024-04-30</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Сделка</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.855</td>\n",
              "      <td>0.845</td>\n",
              "      <td>0.030</td>\n",
              "      <td>0.034</td>\n",
              "      <td>550000.0</td>\n",
              "      <td>520000.0</td>\n",
              "      <td>14107.500</td>\n",
              "      <td>14939.6000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.832</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.028</td>\n",
              "      <td>NaN</td>\n",
              "      <td>670000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15608.320</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.743</td>\n",
              "      <td>0.859</td>\n",
              "      <td>0.050</td>\n",
              "      <td>0.028</td>\n",
              "      <td>120100.0</td>\n",
              "      <td>110000.0</td>\n",
              "      <td>4461.715</td>\n",
              "      <td>2645.7200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.734</td>\n",
              "      <td>0.721</td>\n",
              "      <td>0.063</td>\n",
              "      <td>0.081</td>\n",
              "      <td>142000.0</td>\n",
              "      <td>115000.0</td>\n",
              "      <td>6566.364</td>\n",
              "      <td>6716.1150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.739</td>\n",
              "      <td>0.755</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.043</td>\n",
              "      <td>34000.0</td>\n",
              "      <td>10000.0</td>\n",
              "      <td>1432.182</td>\n",
              "      <td>324.6500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.864</td>\n",
              "      <td>0.866</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.020</td>\n",
              "      <td>550000.0</td>\n",
              "      <td>495000.0</td>\n",
              "      <td>9504.000</td>\n",
              "      <td>8573.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.744</td>\n",
              "      <td>0.714</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.049</td>\n",
              "      <td>329000.0</td>\n",
              "      <td>294000.0</td>\n",
              "      <td>13952.232</td>\n",
              "      <td>10285.8840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.691</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.083</td>\n",
              "      <td>NaN</td>\n",
              "      <td>48000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2752.944</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.875</td>\n",
              "      <td>0.859</td>\n",
              "      <td>0.018</td>\n",
              "      <td>0.021</td>\n",
              "      <td>854000.0</td>\n",
              "      <td>812000.0</td>\n",
              "      <td>13450.500</td>\n",
              "      <td>14647.6680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.740</td>\n",
              "      <td>0.732</td>\n",
              "      <td>0.074</td>\n",
              "      <td>0.072</td>\n",
              "      <td>139400.0</td>\n",
              "      <td>94400.0</td>\n",
              "      <td>7633.544</td>\n",
              "      <td>4975.2576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.749</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.061</td>\n",
              "      <td>NaN</td>\n",
              "      <td>350000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15991.1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.740</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.070</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1760000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>91168.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-231c7761-80e0-4d39-adda-916224445f2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-231c7761-80e0-4d39-adda-916224445f2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-231c7761-80e0-4d39-adda-916224445f2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0564065d-787e-473f-8e5c-8aef2d4184ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0564065d-787e-473f-8e5c-8aef2d4184ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0564065d-787e-473f-8e5c-8aef2d4184ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "('Сделка', NaT)"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_sql('df', con, if_exists='replace', index=False, method='multi')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "7IugcAuJdO69",
        "outputId": "32da5553-33f0-4492-ef51-5eb36d9952f6"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sql = '''\n",
        "with t as (\n",
        "  select a.*, b.*\n",
        "  from df a left join df b using(Сделка)\n",
        "  where a.Дата = '2024-03-31' and b.Дата = '2024-04-30'\n",
        ")\n",
        "select * from t\n",
        "'''\n",
        "select(sql)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "collapsed": true,
        "id": "6Kba6eC3IbN6",
        "outputId": "5e4ea34b-8614-45d8-c278-f166f2cc6082"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Дата, Сделка, Баланс, PD, LGD, резерв, Дата:1, Сделка:1, Баланс:1, PD:1, LGD:1, резерв:1]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55df338a-6bb2-48ba-9061-4ede20128d2f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Дата</th>\n",
              "      <th>Сделка</th>\n",
              "      <th>Баланс</th>\n",
              "      <th>PD</th>\n",
              "      <th>LGD</th>\n",
              "      <th>резерв</th>\n",
              "      <th>Дата:1</th>\n",
              "      <th>Сделка:1</th>\n",
              "      <th>Баланс:1</th>\n",
              "      <th>PD:1</th>\n",
              "      <th>LGD:1</th>\n",
              "      <th>резерв:1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55df338a-6bb2-48ba-9061-4ede20128d2f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55df338a-6bb2-48ba-9061-4ede20128d2f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55df338a-6bb2-48ba-9061-4ede20128d2f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sql = '''\n",
        "with t as (\n",
        "  select a.*, b.*\n",
        "  from df a left join df b using(Сделка)\n",
        "  where a.Дата = '2024-03-31' and b.Дата = '2024-04-30'\n",
        ")\n",
        "select Сделка,\n",
        "    (Баланс - Баланс:1) / Баланс * 100 AS balance_ratio,\n",
        "    (PD - PD:1) / PD * 100 AS pd_ratio,\n",
        "    (LGD - LGD:1) / LGD * 100 AS lgd_ratio,\n",
        "    (резерв - резерв:1) / резерв * 100 AS reserve_ratio\n",
        "from t\n",
        "group by Сделка\n",
        "'''\n",
        "select(sql)\n",
        "#не работает, не могу выявить причину. Верятно, нужно проименовать столбцы"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        },
        "collapsed": true,
        "id": "N5ykMmLdd2lr",
        "outputId": "56568e7e-386e-4cbe-d003-75911948d836"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "error",
          "ename": "DatabaseError",
          "evalue": "Execution failed on sql '\nwith t as (\n  select a.*, b.*\n  from df a left join df b using(Сделка)\n  where a.Дата = '2024-03-31' and b.Дата = '2024-04-30'\n)\nselect Сделка, \n    (Баланс - Баланс:1) / Баланс * 100 AS balance_ratio,\n    (PD - PD:1) / PD * 100 AS pd_ratio,\n    (LGD - LGD:1) / LGD * 100 AS lgd_ratio,\n    (резерв - резерв:1) / резерв * 100 AS reserve_ratio\nfrom t\ngroup by Сделка\n': near \":1\": syntax error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, sql, params)\u001b[0m\n\u001b[1;32m   2261\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2262\u001b[0;31m             \u001b[0mcur\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2263\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mcur\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOperationalError\u001b[0m: near \":1\": syntax error",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mDatabaseError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-589d1765687b>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mgroup\u001b[0m \u001b[0mby\u001b[0m \u001b[0mСделка\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m '''\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;31m#не работает, не могу выявить причину. Верятно, нужно проименовать столбцы\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-2-947ddafcb94e>\u001b[0m in \u001b[0;36mselect\u001b[0;34m(sql)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mcon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msqlite3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'db'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_sql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mread_sql\u001b[0;34m(sql, con, index_col, coerce_float, params, parse_dates, columns, chunksize, dtype_backend, dtype)\u001b[0m\n\u001b[1;32m    652\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mpandasSQL_builder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcon\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpandas_sql\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    653\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpandas_sql\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSQLiteDatabase\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 654\u001b[0;31m             return pandas_sql.read_query(\n\u001b[0m\u001b[1;32m    655\u001b[0m                 \u001b[0msql\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    656\u001b[0m                 \u001b[0mindex_col\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindex_col\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mread_query\u001b[0;34m(self, sql, index_col, coerce_float, parse_dates, params, chunksize, dtype, dtype_backend)\u001b[0m\n\u001b[1;32m   2324\u001b[0m         \u001b[0mdtype_backend\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDtypeBackend\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mLiteral\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"numpy\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"numpy\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2325\u001b[0m     ) -> DataFrame | Iterator[DataFrame]:\n\u001b[0;32m-> 2326\u001b[0;31m         \u001b[0mcursor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2327\u001b[0m         \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcol_desc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol_desc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcursor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescription\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, sql, params)\u001b[0m\n\u001b[1;32m   2272\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2273\u001b[0m             \u001b[0mex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDatabaseError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Execution failed on sql '{sql}': {exc}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2274\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mex\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2276\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mDatabaseError\u001b[0m: Execution failed on sql '\nwith t as (\n  select a.*, b.*\n  from df a left join df b using(Сделка)\n  where a.Дата = '2024-03-31' and b.Дата = '2024-04-30'\n)\nselect Сделка, \n    (Баланс - Баланс:1) / Баланс * 100 AS balance_ratio,\n    (PD - PD:1) / PD * 100 AS pd_ratio,\n    (LGD - LGD:1) / LGD * 100 AS lgd_ratio,\n    (резерв - резерв:1) / резерв * 100 AS reserve_ratio\nfrom t\ngroup by Сделка\n': near \":1\": syntax error"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_m = df.loc[df['Дата']=='2024-03-31']\n",
        "df_a = df.loc[df['Дата']=='2024-04-30']"
      ],
      "metadata": {
        "id": "N14eySJ7gKdL"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = pd.merge(df_m, df_a, on='Сделка', suffixes=('_март', '_апрель'))\n",
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "rzAXh61tiVt8",
        "outputId": "7e128517-6012-41af-a457-de02547fd604"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Дата_март  Сделка  Баланс_март  PD_март  LGD_март  резерв_март Дата_апрель  \\\n",
              "0 2024-03-31       1       550000    0.030     0.855    14107.500  2024-04-30   \n",
              "1 2024-03-31       3       120100    0.050     0.743     4461.715  2024-04-30   \n",
              "2 2024-03-31       4       142000    0.063     0.734     6566.364  2024-04-30   \n",
              "3 2024-03-31       5        34000    0.057     0.739     1432.182  2024-04-30   \n",
              "4 2024-03-31       6       550000    0.020     0.864     9504.000  2024-04-30   \n",
              "5 2024-03-31       7       329000    0.057     0.744    13952.232  2024-04-30   \n",
              "6 2024-03-31       9       854000    0.018     0.875    13450.500  2024-04-30   \n",
              "7 2024-03-31      10       139400    0.074     0.740     7633.544  2024-04-30   \n",
              "\n",
              "   Баланс_апрель  PD_апрель  LGD_апрель  резерв_апрель  \n",
              "0         520000      0.034       0.845     14939.6000  \n",
              "1         110000      0.028       0.859      2645.7200  \n",
              "2         115000      0.081       0.721      6716.1150  \n",
              "3          10000      0.043       0.755       324.6500  \n",
              "4         495000      0.020       0.866      8573.4000  \n",
              "5         294000      0.049       0.714     10285.8840  \n",
              "6         812000      0.021       0.859     14647.6680  \n",
              "7          94400      0.072       0.732      4975.2576  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b2a8210d-aae2-43a4-962d-cb4c4485d381\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Дата_март</th>\n",
              "      <th>Сделка</th>\n",
              "      <th>Баланс_март</th>\n",
              "      <th>PD_март</th>\n",
              "      <th>LGD_март</th>\n",
              "      <th>резерв_март</th>\n",
              "      <th>Дата_апрель</th>\n",
              "      <th>Баланс_апрель</th>\n",
              "      <th>PD_апрель</th>\n",
              "      <th>LGD_апрель</th>\n",
              "      <th>резерв_апрель</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>1</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.030</td>\n",
              "      <td>0.855</td>\n",
              "      <td>14107.500</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>520000</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.845</td>\n",
              "      <td>14939.6000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>3</td>\n",
              "      <td>120100</td>\n",
              "      <td>0.050</td>\n",
              "      <td>0.743</td>\n",
              "      <td>4461.715</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>110000</td>\n",
              "      <td>0.028</td>\n",
              "      <td>0.859</td>\n",
              "      <td>2645.7200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>4</td>\n",
              "      <td>142000</td>\n",
              "      <td>0.063</td>\n",
              "      <td>0.734</td>\n",
              "      <td>6566.364</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>115000</td>\n",
              "      <td>0.081</td>\n",
              "      <td>0.721</td>\n",
              "      <td>6716.1150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>5</td>\n",
              "      <td>34000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.739</td>\n",
              "      <td>1432.182</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>10000</td>\n",
              "      <td>0.043</td>\n",
              "      <td>0.755</td>\n",
              "      <td>324.6500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>6</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.864</td>\n",
              "      <td>9504.000</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>495000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.866</td>\n",
              "      <td>8573.4000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>7</td>\n",
              "      <td>329000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.744</td>\n",
              "      <td>13952.232</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>294000</td>\n",
              "      <td>0.049</td>\n",
              "      <td>0.714</td>\n",
              "      <td>10285.8840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>9</td>\n",
              "      <td>854000</td>\n",
              "      <td>0.018</td>\n",
              "      <td>0.875</td>\n",
              "      <td>13450.500</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>812000</td>\n",
              "      <td>0.021</td>\n",
              "      <td>0.859</td>\n",
              "      <td>14647.6680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>10</td>\n",
              "      <td>139400</td>\n",
              "      <td>0.074</td>\n",
              "      <td>0.740</td>\n",
              "      <td>7633.544</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>94400</td>\n",
              "      <td>0.072</td>\n",
              "      <td>0.732</td>\n",
              "      <td>4975.2576</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2a8210d-aae2-43a4-962d-cb4c4485d381')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b2a8210d-aae2-43a4-962d-cb4c4485d381 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b2a8210d-aae2-43a4-962d-cb4c4485d381');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89f0bccc-476f-4039-a0d0-3738de35038d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89f0bccc-476f-4039-a0d0-3738de35038d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89f0bccc-476f-4039-a0d0-3738de35038d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u0414\\u0430\\u0442\\u0430_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-03-31 00:00:00\",\n        \"max\": \"2024-03-31 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2024-03-31 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0421\\u0434\\u0435\\u043b\\u043a\\u0430\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 286344,\n        \"min\": 34000,\n        \"max\": 854000,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          550000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.020863074009907005,\n        \"min\": 0.018,\n        \"max\": 0.074,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06481126445302544,\n        \"min\": 0.734,\n        \"max\": 0.875,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4724.258985513478,\n        \"min\": 1432.182,\n        \"max\": 14107.5,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4461.715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0414\\u0430\\u0442\\u0430_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-04-30 00:00:00\",\n        \"max\": \"2024-04-30 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2024-04-30 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 279024,\n        \"min\": 10000,\n        \"max\": 812000,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          110000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.022797242941072625,\n        \"min\": 0.02,\n        \"max\": 0.081,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06900194096648918,\n        \"min\": 0.714,\n        \"max\": 0.866,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5293.944493814393,\n        \"min\": 324.65,\n        \"max\": 14939.6,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2645.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['Δ_Баланс'] = (df2['Баланс_апрель'] - df2['Баланс_март'])/df2['Баланс_апрель']\n",
        "df2['Δ_PD'] = (df2['PD_апрель'] - df2['PD_март'])/df2['PD_апрель']\n",
        "df2['Δ_LGD'] = (df2['LGD_апрель'] - df2['LGD_март'])/df2['LGD_апрель']\n",
        "df2['Δ_резерв'] = (df2['резерв_апрель'] - df2['резерв_март'])/df2['резерв_апрель']\n",
        "df3 = df2[['Сделка', 'Δ_Баланс', 'Δ_PD', 'Δ_LGD', 'Δ_резерв']]\n",
        "df3.iloc[:,1:].round(3).style.background_gradient()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "hZMDX4C7infm",
        "outputId": "8df5c56d-70f8-423d-8c5c-4e14b125d5f8"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7e8d209bd1b0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_2c1c0_row0_col0, #T_2c1c0_row1_col2, #T_2c1c0_row2_col1, #T_2c1c0_row6_col0, #T_2c1c0_row6_col3 {\n",
              "  background-color: #023858;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row0_col1 {\n",
              "  background-color: #045483;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row0_col2 {\n",
              "  background-color: #e2dfee;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row0_col3 {\n",
              "  background-color: #02395a;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row1_col0, #T_2c1c0_row2_col3 {\n",
              "  background-color: #023c5f;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row1_col1, #T_2c1c0_row3_col0, #T_2c1c0_row3_col3, #T_2c1c0_row5_col2 {\n",
              "  background-color: #fff7fb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row1_col3, #T_2c1c0_row4_col1 {\n",
              "  background-color: #056ba7;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row2_col0 {\n",
              "  background-color: #034c78;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row2_col2 {\n",
              "  background-color: #eae6f1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row3_col1 {\n",
              "  background-color: #86b0d3;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row3_col2 {\n",
              "  background-color: #acc0dd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row4_col0 {\n",
              "  background-color: #023e62;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row4_col2 {\n",
              "  background-color: #d1d2e6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row4_col3 {\n",
              "  background-color: #03466e;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row5_col0 {\n",
              "  background-color: #023f64;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row5_col1 {\n",
              "  background-color: #3991c1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row5_col3 {\n",
              "  background-color: #045a8d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row6_col1 {\n",
              "  background-color: #034d79;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row6_col2 {\n",
              "  background-color: #ebe6f2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row7_col0 {\n",
              "  background-color: #04649d;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row7_col1 {\n",
              "  background-color: #056faf;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_2c1c0_row7_col2 {\n",
              "  background-color: #e1dfed;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_2c1c0_row7_col3 {\n",
              "  background-color: #04639b;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_2c1c0\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_2c1c0_level0_col0\" class=\"col_heading level0 col0\" >Δ_Баланс</th>\n",
              "      <th id=\"T_2c1c0_level0_col1\" class=\"col_heading level0 col1\" >Δ_PD</th>\n",
              "      <th id=\"T_2c1c0_level0_col2\" class=\"col_heading level0 col2\" >Δ_LGD</th>\n",
              "      <th id=\"T_2c1c0_level0_col3\" class=\"col_heading level0 col3\" >Δ_резерв</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_2c1c0_row0_col0\" class=\"data row0 col0\" >-0.058000</td>\n",
              "      <td id=\"T_2c1c0_row0_col1\" class=\"data row0 col1\" >0.118000</td>\n",
              "      <td id=\"T_2c1c0_row0_col2\" class=\"data row0 col2\" >-0.012000</td>\n",
              "      <td id=\"T_2c1c0_row0_col3\" class=\"data row0 col3\" >0.056000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_2c1c0_row1_col0\" class=\"data row1 col0\" >-0.092000</td>\n",
              "      <td id=\"T_2c1c0_row1_col1\" class=\"data row1 col1\" >-0.786000</td>\n",
              "      <td id=\"T_2c1c0_row1_col2\" class=\"data row1 col2\" >0.135000</td>\n",
              "      <td id=\"T_2c1c0_row1_col3\" class=\"data row1 col3\" >-0.686000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_2c1c0_row2_col0\" class=\"data row2 col0\" >-0.235000</td>\n",
              "      <td id=\"T_2c1c0_row2_col1\" class=\"data row2 col1\" >0.222000</td>\n",
              "      <td id=\"T_2c1c0_row2_col2\" class=\"data row2 col2\" >-0.018000</td>\n",
              "      <td id=\"T_2c1c0_row2_col3\" class=\"data row2 col3\" >0.022000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_2c1c0_row3_col0\" class=\"data row3 col0\" >-2.400000</td>\n",
              "      <td id=\"T_2c1c0_row3_col1\" class=\"data row3 col1\" >-0.326000</td>\n",
              "      <td id=\"T_2c1c0_row3_col2\" class=\"data row3 col2\" >0.021000</td>\n",
              "      <td id=\"T_2c1c0_row3_col3\" class=\"data row3 col3\" >-3.411000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_2c1c0_row4_col0\" class=\"data row4 col0\" >-0.111000</td>\n",
              "      <td id=\"T_2c1c0_row4_col1\" class=\"data row4 col1\" >0.000000</td>\n",
              "      <td id=\"T_2c1c0_row4_col2\" class=\"data row4 col2\" >0.002000</td>\n",
              "      <td id=\"T_2c1c0_row4_col3\" class=\"data row4 col3\" >-0.109000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_2c1c0_row5_col0\" class=\"data row5 col0\" >-0.119000</td>\n",
              "      <td id=\"T_2c1c0_row5_col1\" class=\"data row5 col1\" >-0.163000</td>\n",
              "      <td id=\"T_2c1c0_row5_col2\" class=\"data row5 col2\" >-0.042000</td>\n",
              "      <td id=\"T_2c1c0_row5_col3\" class=\"data row5 col3\" >-0.356000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_2c1c0_row6_col0\" class=\"data row6 col0\" >-0.052000</td>\n",
              "      <td id=\"T_2c1c0_row6_col1\" class=\"data row6 col1\" >0.143000</td>\n",
              "      <td id=\"T_2c1c0_row6_col2\" class=\"data row6 col2\" >-0.019000</td>\n",
              "      <td id=\"T_2c1c0_row6_col3\" class=\"data row6 col3\" >0.082000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_2c1c0_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_2c1c0_row7_col0\" class=\"data row7 col0\" >-0.477000</td>\n",
              "      <td id=\"T_2c1c0_row7_col1\" class=\"data row7 col1\" >-0.028000</td>\n",
              "      <td id=\"T_2c1c0_row7_col2\" class=\"data row7 col2\" >-0.011000</td>\n",
              "      <td id=\"T_2c1c0_row7_col3\" class=\"data row7 col3\" >-0.534000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df3.iloc[:,1:].corr()\n",
        "sns.heatmap(corr, annot = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "XuVqdvvlj2Ee",
        "outputId": "5c84c00e-8eb2-49af-dacd-3ec2864af57b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## CatBoost"
      ],
      "metadata": {
        "id": "Vp-SP6QFI71H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost\n",
        "!pip install shap"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "collapsed": true,
        "id": "I5vO65iPl7CX",
        "outputId": "918586e7-80be-45d8-b60c-5921617cdaad"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.1.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.4)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n",
            "Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: catboost\n",
            "Successfully installed catboost-1.2.7\n",
            "Collecting shap\n",
            "  Downloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (24 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap) (1.3.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap) (2.1.4)\n",
            "Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap) (4.66.5)\n",
            "Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap) (24.1)\n",
            "Collecting slicer==0.0.8 (from shap)\n",
            "  Downloading slicer-0.0.8-py3-none-any.whl.metadata (4.0 kB)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap) (0.60.0)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap) (2.2.1)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap) (0.43.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2024.1)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->shap) (1.16.0)\n",
            "Downloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (540 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m540.1/540.1 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading slicer-0.0.8-py3-none-any.whl (15 kB)\n",
            "Installing collected packages: slicer, shap\n",
            "Successfully installed shap-0.46.0 slicer-0.0.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = df.copy()"
      ],
      "metadata": {
        "id": "WSp5aL6EuIZH"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = t.drop(['резерв', 'Сделка', 'Дата'], axis=1)\n",
        "y = t['резерв']"
      ],
      "metadata": {
        "id": "KC2pr5zyrzVT"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "nWyH2J__s5Rx"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, Y_train, Y_val = train_test_split(X, y, random_state=42, test_size=0.30)"
      ],
      "metadata": {
        "id": "oYxphEq-sDk8"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from catboost import CatBoostRegressor\n",
        "import shap"
      ],
      "metadata": {
        "id": "iv2Wtuttl5Zt"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params = {\n",
        "     'random_seed': 42,\n",
        "     'loss_function': 'RMSE',\n",
        "     'early_stopping_rounds': 100,\n",
        "}\n",
        "model = CatBoostRegressor(**params)\n",
        "model.fit(X_train, Y_train, verbose=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "WB_WSNJplE7l",
        "outputId": "1162f632-0dbb-4a6d-fd0d-c32671edd8d8"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<catboost.core.CatBoostRegressor at 0x7e8d22c73010>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error as mse"
      ],
      "metadata": {
        "id": "G_E84Jc3tVms"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train = model.predict(X_train)\n",
        "y_val = model.predict(X_val)\n",
        "print(\"Training RMSE: \", np.sqrt(mse(Y_train, y_train)))\n",
        "print(\"Validation RMSE: \", np.sqrt(mse(Y_val, y_val)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "6u4_ozrqtJkX",
        "outputId": "75da405a-bab0-43d1-cd2d-cea78cc0b150"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training RMSE:  141.72559866100232\n",
            "Validation RMSE:  1133.7676635749583\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = shap.TreeExplainer(model)\n",
        "shap_values = explainer.shap_values(X)\n",
        "shap.summary_plot(shap_values, X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "id": "tOd-WnoOu2Ca",
        "outputId": "e21d8152-8de5-4440-d743-170b2f27b581"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x270 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_val)\n",
        "plt.scatter(Y_val, y_pred, color='blue')\n",
        "plt.plot([min(Y_val), max(Y_val)], [min(Y_val), max(Y_val)])\n",
        "plt.xlabel('Факт знач')\n",
        "plt.ylabel('Предсказ знач')\n",
        "plt.title('Факт знач vs Предсказ знач')\n",
        "plt.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "UmysVCIxEGuM",
        "outputId": "e3bb73a7-ad70-446a-ad0e-b06334bd0727"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_importance = model.get_feature_importance()\n",
        "for feature, importance in zip(X.columns, feature_importance):\n",
        "    print(f'Feature: {feature}, Importance: {importance}')\n",
        "#нужна l2 регуляризация"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "mCsig3tSEXxg",
        "outputId": "95d2912c-cb7e-4f01-bba8-dd7267d29900"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature: Баланс, Importance: 77.86830728064578\n",
            "Feature: PD, Importance: 9.142619382321689\n",
            "Feature: LGD, Importance: 12.989073337032544\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## LR"
      ],
      "metadata": {
        "id": "9Gwlz4ExJCLg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "NzowJxarsNkr"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "iC0j-3xFrlBb"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, Y_train, Y_val = train_test_split(X_scaled, y, random_state=42, test_size=0.30)"
      ],
      "metadata": {
        "id": "KZtvblTqwMY3"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()\n",
        "model.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "lTGBLzJwwTo0",
        "outputId": "b9f3f54d-0649-4306-d915-5ef9075eec1e"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train = model.predict(X_train)\n",
        "y_val = model.predict(X_val)\n",
        "print(\"Training RMSE: \", np.sqrt(mse(Y_train, y_train)))\n",
        "print(\"Validation RMSE: \", np.sqrt(mse(Y_val, y_val)))\n",
        "#переобучение"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "oK9-GlSwwdA5",
        "outputId": "50e9be73-a30e-4811-991b-a7e1f870006c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training RMSE:  4623.868946645929\n",
            "Validation RMSE:  6293.198800465213\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_val)\n",
        "plt.scatter(Y_val, y_pred, color='blue')\n",
        "plt.plot([min(Y_val), max(Y_val)], [min(Y_val), max(Y_val)])\n",
        "plt.xlabel('Факт знач')\n",
        "plt.ylabel('Предсказ знач')\n",
        "plt.title('Факт знач vs Предсказ знач')\n",
        "plt.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "VgckiRWADMMZ",
        "outputId": "b76bec7e-7e0d-4897-e5e1-53cbaddc09c8"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Coefficient': model.coef_\n",
        "})\n",
        "print(feature_importance)\n",
        "#нужна l2 регуляризация"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "yhWHVoWFwq3B",
        "outputId": "6470d0f1-7e68-4acf-f29a-3a33d392fd75"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Feature   Coefficient\n",
            "0  Баланс  19603.254706\n",
            "1      PD   2801.748172\n",
            "2     LGD  -3922.758297\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm"
      ],
      "metadata": {
        "id": "6iRMlUeMA60J"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, Y_train, Y_val = train_test_split(X, y, random_state=42, test_size=0.30)\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X_train.columns)\n",
        "def build_model(X,y):\n",
        "    X = sm.add_constant(X)\n",
        "    lm = sm.OLS(y,X).fit()\n",
        "    print(lm.summary())\n",
        "    return X\n",
        "build_model(X_train_scaled_df, y_train)\n",
        "#R-squared 1 переобучение"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1021
        },
        "id": "GfNm4PgIw1Pm",
        "outputId": "16ed65f2-6676-400e-ae70-9ca1e6df37b7"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       1.000\n",
            "Model:                            OLS   Adj. R-squared:                  1.000\n",
            "Method:                 Least Squares   F-statistic:                 3.580e+31\n",
            "Date:                Tue, 10 Sep 2024   Prob (F-statistic):          1.90e-155\n",
            "Time:                        11:07:38   Log-Likelihood:                 340.57\n",
            "No. Observations:                  14   AIC:                            -673.1\n",
            "Df Residuals:                      10   BIC:                            -670.6\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const        1.37e+04   2.08e-12   6.57e+15      0.000    1.37e+04    1.37e+04\n",
            "Баланс      2.173e+04   2.21e-12   9.82e+15      0.000    2.17e+04    2.17e+04\n",
            "PD          2669.8471   5.77e-12   4.63e+14      0.000    2669.847    2669.847\n",
            "LGD        -3586.8651   5.87e-12  -6.11e+14      0.000   -3586.865   -3586.865\n",
            "==============================================================================\n",
            "Omnibus:                        3.449   Durbin-Watson:                   1.124\n",
            "Prob(Omnibus):                  0.178   Jarque-Bera (JB):                1.885\n",
            "Skew:                          -0.899   Prob(JB):                        0.390\n",
            "Kurtosis:                       3.033   Cond. No.                         5.47\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n>=20 ... continuing anyway, n=14\n",
            "  res = hypotest_fun_out(*samples, **kwds)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    const    Баланс        PD       LGD\n",
              "0     1.0 -0.549040 -1.226358  1.555733\n",
              "1     1.0 -0.477631  0.490543 -0.638089\n",
              "2     1.0 -0.013469  0.392434 -0.374830\n",
              "3     1.0  1.017506 -1.569738  1.555733\n",
              "4     1.0 -0.772195 -0.490543 -0.269527\n",
              "5     1.0 -0.526502 -0.147163 -0.480134\n",
              "6     1.0 -0.483433  1.030140 -0.532785\n",
              "7     1.0  3.133013  0.833923 -0.532785\n",
              "8     1.0 -0.718638  0.196217 -0.550336\n",
              "9     1.0 -0.537883  1.373521 -0.866246\n",
              "10    1.0 -0.687396  1.471629 -1.392763\n",
              "11    1.0  0.365894 -0.932032  1.310025\n",
              "12    1.0  0.310105 -1.618792  1.678587\n",
              "13    1.0 -0.060331  0.196217 -0.462583"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b59d434a-b39d-437e-a2ae-4bd53907a320\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>Баланс</th>\n",
              "      <th>PD</th>\n",
              "      <th>LGD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.549040</td>\n",
              "      <td>-1.226358</td>\n",
              "      <td>1.555733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.477631</td>\n",
              "      <td>0.490543</td>\n",
              "      <td>-0.638089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.013469</td>\n",
              "      <td>0.392434</td>\n",
              "      <td>-0.374830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.017506</td>\n",
              "      <td>-1.569738</td>\n",
              "      <td>1.555733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.772195</td>\n",
              "      <td>-0.490543</td>\n",
              "      <td>-0.269527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.526502</td>\n",
              "      <td>-0.147163</td>\n",
              "      <td>-0.480134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.483433</td>\n",
              "      <td>1.030140</td>\n",
              "      <td>-0.532785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1.0</td>\n",
              "      <td>3.133013</td>\n",
              "      <td>0.833923</td>\n",
              "      <td>-0.532785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.718638</td>\n",
              "      <td>0.196217</td>\n",
              "      <td>-0.550336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.537883</td>\n",
              "      <td>1.373521</td>\n",
              "      <td>-0.866246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.687396</td>\n",
              "      <td>1.471629</td>\n",
              "      <td>-1.392763</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.365894</td>\n",
              "      <td>-0.932032</td>\n",
              "      <td>1.310025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.310105</td>\n",
              "      <td>-1.618792</td>\n",
              "      <td>1.678587</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.060331</td>\n",
              "      <td>0.196217</td>\n",
              "      <td>-0.462583</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b59d434a-b39d-437e-a2ae-4bd53907a320')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b59d434a-b39d-437e-a2ae-4bd53907a320 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b59d434a-b39d-437e-a2ae-4bd53907a320');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-980ce560-d24d-4590-b7b9-310cc5a9fff3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-980ce560-d24d-4590-b7b9-310cc5a9fff3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-980ce560-d24d-4590-b7b9-310cc5a9fff3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#R-squared 1 \\u043f\\u0435\\u0440\\u0435\\u043e\\u0431\\u0443\\u0447\\u0435\\u043d\\u0438\\u0435\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"const\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0377490433255416,\n        \"min\": -0.7721951519853372,\n        \"max\": 3.1330130683966964,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          -0.5378826587624151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0377490433255414,\n        \"min\": -1.618792185629268,\n        \"max\": 1.4716292596629708,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.9320318644532151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0377490433255416,\n        \"min\": -1.392763240672763,\n        \"max\": 1.6785868400187476,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1.6785868400187476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Intercept of the model:',model.intercept_)\n",
        "print('Coefficient of the line:',model.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Vp5kCWzZAr7t",
        "outputId": "f0230ee8-19d3-4038-957e-fe6d32dd79c5"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercept of the model: 14377.40991598742\n",
            "Coefficient of the line: [19603.25470634  2801.74817159 -3922.758297  ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Итог"
      ],
      "metadata": {
        "id": "3-sS8jARJHNL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "CB показал лучше результат, чем LR\n",
        "\n",
        "Согласно CB набольший вес у Баланса\n",
        "1.   Feature: Баланс, Importance: 77.86830728064578\n",
        "2.   Feature: PD, Importance: 9.142619382321689\n",
        "3.   Feature: LGD, Importance: 12.989073337032544\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-WRs7NaDJLL_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "GqYRRUurKhF_",
        "outputId": "8e1e9020-2b9c-42ae-f379-21d4ca6fba58"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Дата_март  Сделка  Баланс_март  PD_март  LGD_март  резерв_март Дата_апрель  \\\n",
              "0 2024-03-31       1       550000    0.030     0.855    14107.500  2024-04-30   \n",
              "1 2024-03-31       3       120100    0.050     0.743     4461.715  2024-04-30   \n",
              "2 2024-03-31       4       142000    0.063     0.734     6566.364  2024-04-30   \n",
              "3 2024-03-31       5        34000    0.057     0.739     1432.182  2024-04-30   \n",
              "4 2024-03-31       6       550000    0.020     0.864     9504.000  2024-04-30   \n",
              "5 2024-03-31       7       329000    0.057     0.744    13952.232  2024-04-30   \n",
              "6 2024-03-31       9       854000    0.018     0.875    13450.500  2024-04-30   \n",
              "7 2024-03-31      10       139400    0.074     0.740     7633.544  2024-04-30   \n",
              "\n",
              "   Баланс_апрель  PD_апрель  LGD_апрель  резерв_апрель  Δ_Баланс      Δ_PD  \\\n",
              "0         520000      0.034       0.845     14939.6000 -0.057692  0.117647   \n",
              "1         110000      0.028       0.859      2645.7200 -0.091818 -0.785714   \n",
              "2         115000      0.081       0.721      6716.1150 -0.234783  0.222222   \n",
              "3          10000      0.043       0.755       324.6500 -2.400000 -0.325581   \n",
              "4         495000      0.020       0.866      8573.4000 -0.111111  0.000000   \n",
              "5         294000      0.049       0.714     10285.8840 -0.119048 -0.163265   \n",
              "6         812000      0.021       0.859     14647.6680 -0.051724  0.142857   \n",
              "7          94400      0.072       0.732      4975.2576 -0.476695 -0.027778   \n",
              "\n",
              "      Δ_LGD  Δ_резерв  \n",
              "0 -0.011834  0.055698  \n",
              "1  0.135041 -0.686390  \n",
              "2 -0.018031  0.022297  \n",
              "3  0.021192 -3.411465  \n",
              "4  0.002309 -0.108545  \n",
              "5 -0.042017 -0.356445  \n",
              "6 -0.018626  0.081731  \n",
              "7 -0.010929 -0.534301  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-689c0bc1-60ba-4158-929c-eea0677ebda9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Дата_март</th>\n",
              "      <th>Сделка</th>\n",
              "      <th>Баланс_март</th>\n",
              "      <th>PD_март</th>\n",
              "      <th>LGD_март</th>\n",
              "      <th>резерв_март</th>\n",
              "      <th>Дата_апрель</th>\n",
              "      <th>Баланс_апрель</th>\n",
              "      <th>PD_апрель</th>\n",
              "      <th>LGD_апрель</th>\n",
              "      <th>резерв_апрель</th>\n",
              "      <th>Δ_Баланс</th>\n",
              "      <th>Δ_PD</th>\n",
              "      <th>Δ_LGD</th>\n",
              "      <th>Δ_резерв</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>1</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.030</td>\n",
              "      <td>0.855</td>\n",
              "      <td>14107.500</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>520000</td>\n",
              "      <td>0.034</td>\n",
              "      <td>0.845</td>\n",
              "      <td>14939.6000</td>\n",
              "      <td>-0.057692</td>\n",
              "      <td>0.117647</td>\n",
              "      <td>-0.011834</td>\n",
              "      <td>0.055698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>3</td>\n",
              "      <td>120100</td>\n",
              "      <td>0.050</td>\n",
              "      <td>0.743</td>\n",
              "      <td>4461.715</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>110000</td>\n",
              "      <td>0.028</td>\n",
              "      <td>0.859</td>\n",
              "      <td>2645.7200</td>\n",
              "      <td>-0.091818</td>\n",
              "      <td>-0.785714</td>\n",
              "      <td>0.135041</td>\n",
              "      <td>-0.686390</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>4</td>\n",
              "      <td>142000</td>\n",
              "      <td>0.063</td>\n",
              "      <td>0.734</td>\n",
              "      <td>6566.364</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>115000</td>\n",
              "      <td>0.081</td>\n",
              "      <td>0.721</td>\n",
              "      <td>6716.1150</td>\n",
              "      <td>-0.234783</td>\n",
              "      <td>0.222222</td>\n",
              "      <td>-0.018031</td>\n",
              "      <td>0.022297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>5</td>\n",
              "      <td>34000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.739</td>\n",
              "      <td>1432.182</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>10000</td>\n",
              "      <td>0.043</td>\n",
              "      <td>0.755</td>\n",
              "      <td>324.6500</td>\n",
              "      <td>-2.400000</td>\n",
              "      <td>-0.325581</td>\n",
              "      <td>0.021192</td>\n",
              "      <td>-3.411465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>6</td>\n",
              "      <td>550000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.864</td>\n",
              "      <td>9504.000</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>495000</td>\n",
              "      <td>0.020</td>\n",
              "      <td>0.866</td>\n",
              "      <td>8573.4000</td>\n",
              "      <td>-0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.002309</td>\n",
              "      <td>-0.108545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>7</td>\n",
              "      <td>329000</td>\n",
              "      <td>0.057</td>\n",
              "      <td>0.744</td>\n",
              "      <td>13952.232</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>294000</td>\n",
              "      <td>0.049</td>\n",
              "      <td>0.714</td>\n",
              "      <td>10285.8840</td>\n",
              "      <td>-0.119048</td>\n",
              "      <td>-0.163265</td>\n",
              "      <td>-0.042017</td>\n",
              "      <td>-0.356445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>9</td>\n",
              "      <td>854000</td>\n",
              "      <td>0.018</td>\n",
              "      <td>0.875</td>\n",
              "      <td>13450.500</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>812000</td>\n",
              "      <td>0.021</td>\n",
              "      <td>0.859</td>\n",
              "      <td>14647.6680</td>\n",
              "      <td>-0.051724</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>-0.018626</td>\n",
              "      <td>0.081731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2024-03-31</td>\n",
              "      <td>10</td>\n",
              "      <td>139400</td>\n",
              "      <td>0.074</td>\n",
              "      <td>0.740</td>\n",
              "      <td>7633.544</td>\n",
              "      <td>2024-04-30</td>\n",
              "      <td>94400</td>\n",
              "      <td>0.072</td>\n",
              "      <td>0.732</td>\n",
              "      <td>4975.2576</td>\n",
              "      <td>-0.476695</td>\n",
              "      <td>-0.027778</td>\n",
              "      <td>-0.010929</td>\n",
              "      <td>-0.534301</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-689c0bc1-60ba-4158-929c-eea0677ebda9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-689c0bc1-60ba-4158-929c-eea0677ebda9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-689c0bc1-60ba-4158-929c-eea0677ebda9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a0fc225a-90fe-45e5-a006-d16abc71c242\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0fc225a-90fe-45e5-a006-d16abc71c242')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a0fc225a-90fe-45e5-a006-d16abc71c242 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u0414\\u0430\\u0442\\u0430_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-03-31 00:00:00\",\n        \"max\": \"2024-03-31 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2024-03-31 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0421\\u0434\\u0435\\u043b\\u043a\\u0430\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 286344,\n        \"min\": 34000,\n        \"max\": 854000,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          550000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.020863074009907005,\n        \"min\": 0.018,\n        \"max\": 0.074,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06481126445302544,\n        \"min\": 0.734,\n        \"max\": 0.875,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432_\\u043c\\u0430\\u0440\\u0442\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4724.258985513478,\n        \"min\": 1432.182,\n        \"max\": 14107.5,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4461.715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0414\\u0430\\u0442\\u0430_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-04-30 00:00:00\",\n        \"max\": \"2024-04-30 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2024-04-30 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 279024,\n        \"min\": 10000,\n        \"max\": 812000,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          110000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PD_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.022797242941072625,\n        \"min\": 0.02,\n        \"max\": 0.081,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LGD_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06900194096648918,\n        \"min\": 0.714,\n        \"max\": 0.866,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432_\\u0430\\u043f\\u0440\\u0435\\u043b\\u044c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5293.944493814393,\n        \"min\": 324.65,\n        \"max\": 14939.6,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2645.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8030585761499074,\n        \"min\": -2.4,\n        \"max\": -0.05172413793103448,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.09181818181818181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_PD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3274225120885258,\n        \"min\": -0.7857142857142858,\n        \"max\": 0.22222222222222224,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7857142857142858\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_LGD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.054745849232194534,\n        \"min\": -0.042016806722689114,\n        \"max\": 0.1350407450523865,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1350407450523865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1647531957799289,\n        \"min\": -3.411464654243032,\n        \"max\": 0.08173096222552297,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.6863897162209155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "YO_q33a2LfjT",
        "outputId": "325460c8-b5fe-4ad0-86da-6d68c3db6535"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Сделка  Δ_Баланс      Δ_PD     Δ_LGD  Δ_резерв\n",
              "0       1 -0.057692  0.117647 -0.011834  0.055698\n",
              "1       3 -0.091818 -0.785714  0.135041 -0.686390\n",
              "2       4 -0.234783  0.222222 -0.018031  0.022297\n",
              "3       5 -2.400000 -0.325581  0.021192 -3.411465\n",
              "4       6 -0.111111  0.000000  0.002309 -0.108545\n",
              "5       7 -0.119048 -0.163265 -0.042017 -0.356445\n",
              "6       9 -0.051724  0.142857 -0.018626  0.081731\n",
              "7      10 -0.476695 -0.027778 -0.010929 -0.534301"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55b01f51-b960-486a-bd60-137aa08a7a18\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Сделка</th>\n",
              "      <th>Δ_Баланс</th>\n",
              "      <th>Δ_PD</th>\n",
              "      <th>Δ_LGD</th>\n",
              "      <th>Δ_резерв</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.057692</td>\n",
              "      <td>0.117647</td>\n",
              "      <td>-0.011834</td>\n",
              "      <td>0.055698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>-0.091818</td>\n",
              "      <td>-0.785714</td>\n",
              "      <td>0.135041</td>\n",
              "      <td>-0.686390</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>-0.234783</td>\n",
              "      <td>0.222222</td>\n",
              "      <td>-0.018031</td>\n",
              "      <td>0.022297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>-2.400000</td>\n",
              "      <td>-0.325581</td>\n",
              "      <td>0.021192</td>\n",
              "      <td>-3.411465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>-0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.002309</td>\n",
              "      <td>-0.108545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7</td>\n",
              "      <td>-0.119048</td>\n",
              "      <td>-0.163265</td>\n",
              "      <td>-0.042017</td>\n",
              "      <td>-0.356445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>9</td>\n",
              "      <td>-0.051724</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>-0.018626</td>\n",
              "      <td>0.081731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>10</td>\n",
              "      <td>-0.476695</td>\n",
              "      <td>-0.027778</td>\n",
              "      <td>-0.010929</td>\n",
              "      <td>-0.534301</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55b01f51-b960-486a-bd60-137aa08a7a18')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55b01f51-b960-486a-bd60-137aa08a7a18 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55b01f51-b960-486a-bd60-137aa08a7a18');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c7aa1f48-bb1b-456b-ac59-2a25b72a3f10\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7aa1f48-bb1b-456b-ac59-2a25b72a3f10')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c7aa1f48-bb1b-456b-ac59-2a25b72a3f10 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3",
              "summary": "{\n  \"name\": \"df3\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u0421\\u0434\\u0435\\u043b\\u043a\\u0430\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_\\u0411\\u0430\\u043b\\u0430\\u043d\\u0441\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8030585761499074,\n        \"min\": -2.4,\n        \"max\": -0.05172413793103448,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.09181818181818181,\n          -0.11904761904761904,\n          -0.057692307692307696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_PD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3274225120885258,\n        \"min\": -0.7857142857142858,\n        \"max\": 0.22222222222222224,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7857142857142858,\n          -0.16326530612244897,\n          0.11764705882352951\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_LGD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.054745849232194534,\n        \"min\": -0.042016806722689114,\n        \"max\": 0.1350407450523865,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1350407450523865,\n          -0.042016806722689114,\n          -0.011834319526627229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u0394_\\u0440\\u0435\\u0437\\u0435\\u0440\\u0432\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1647531957799289,\n        \"min\": -3.411464654243032,\n        \"max\": 0.08173096222552297,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.6863897162209155,\n          -0.35644461866379207,\n          0.05569760903906399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.iloc[:,1:-1].mean().sort_values()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "Lglg41ATJJBD",
        "outputId": "22c8c4e1-1c16-4f17-8217-fb7c72ba01a0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Δ_Баланс   -0.442859\n",
              "Δ_PD       -0.102452\n",
              "Δ_LGD       0.007138\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Δ_Баланс</th>\n",
              "      <td>-0.442859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Δ_PD</th>\n",
              "      <td>-0.102452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Δ_LGD</th>\n",
              "      <td>0.007138</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    }
  ]
}
